configure()

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.3'
        classpath 'org.robovm:robovm-gradle-plugin:1.0.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'org.yaml:snakeyaml:1.14'
    }
}

allprojects {
    version = cfg.version
    
    ext {
        cfg = cfg
        appName = cfg.name
        packageName = cfg.package
        packageDir = cfg.package.replace('.', '/')
        screenOrientation = cfg.window ? (cfg.window.orientation ? cfg.window.orientation : "sensor") : "sensor"
        nonVersion = file('VERSION').exists() ? file('VERSION').text.trim() : file('../VERSION').text.trim()
        gdxVersion = '1.6.2'
        roboVMVersion = '1.3.0'
        vals = [[
            "%APP_NAME%",
            "%PACKAGE%",
            "%PACKAGE_DIR%",
            "%SCREEN_ORIENTATION%"
        ],[
            appName,
            packageName,
            packageDir,
            screenOrientation
        ]]
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile files("../libs/luaj.jar")
        compile files("../libs/snakeyaml.jar")
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    }
}

project(":desktop") {
    apply plugin: "java"
    
    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }
}

project(":android") {
    apply plugin: "android-sdk-manager"
    apply plugin: "android"
    
    configurations { natives }

    dependencies {
        compile project(":core")
        compile files("../libs/luaj.jar")
        compile files("../libs/snakeyaml.jar")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    }
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"

    dependencies {
        compile project(":core")
        compile files("../src/build/libs/src-$nonVersion")
        compile "org.robovm:robovm-rt:${roboVMVersion}"
        compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-ios"
    }
}

task cleanAssets << {
    deldir file("android/assets")
}

task hellolua << {
    file("../assets").mkdir()
    
    copy {
        from "res"
        into "../assets"
        include "hello.lua"
        rename "hello.lua", "main.lua"
    }
    
    copy {
        from "res"
        into "../"
        include "hello.yml"
        rename "hello.yml", "config.yml"
    }

    copy {
        from "res"
        into "../assets"
        include "lint_config.lua"
    }
}

task hellomoon << {
    file("../assets").mkdir()
    
    copy {
        from "res"
        into "../assets"
        include "hello.moon"
        rename "hello.moon", "main.moon"
    }
    
    copy {
        from "res"
        into "../"
        include "hello.yml"
        rename "hello.yml", "config.yml"
    }

    copy {
        from "res"
        into "../assets"
        include "lint_config.lua"
    }
}


task resolveDependencies << {
    project.rootProject.allprojects.each { subProject ->
        subProject.buildscript.configurations.each { configuration -> configuration.resolve() }
        subProject.configurations.each { configuration -> configuration.resolve() }
    }
}

task update(dependsOn: ':updateAssets'){
    def src = "../"
    def res = "res"
    def out = "android/assets/non"
    def files = [ "logo.png", "splash.png", "font.ttf" ]
    
    for(fl in files) {
        if (file("${src}/${fl}").exists()) {
            copy {
                from src
                into out
                include "${fl}"
            }
        } else {
            copy {
                from res
                into out
                include "${fl}"
            }
        }
    }

    copy {
        from "../assets"
        into "src"
        include "*.lua"
    }
    
    copy {
        from "../"
        into "android/assets/non"
        include "config.yml"
    }
}

task updateDesktop << {
    deldir(file("desktop/src"))
    def out = "android/assets/non"
    
    copyAndReplace("platforms/desktop/DesktopLauncher.java", "desktop/src/$packageDir/desktop/DesktopLauncher.java")
    copyAndResizeIcon("${out}/icon-16.png", 16)
    copyAndResizeIcon("${out}/icon-32.png", 32)
    copyAndResizeIcon("${out}/icon-64.png", 64)
    copyAndResizeIcon("${out}/icon-192.png", 192)
    copyAndResizeIcon("${out}/icon-256.png", 256)
}

task updateAndroid(dependsOn: 'android:copyNatives') << {
    deldir(file("android/src"))
    file("android/res/drawable-mdpi").mkdirs()
    file("android/res/drawable-hdpi").mkdirs()
    file("android/res/drawable-xhdpi").mkdirs()
    file("android/res/drawable-xxhdpi").mkdirs()
    
    copyAndReplace("platforms/android/AndroidManifest.xml", "android/AndroidManifest.xml")
    copyAndReplace("platforms/android/AndroidLauncher.java", "android/src/$packageDir/android/AndroidLauncher.java")
    copyAndResizeIcon("android/res/drawable-mdpi/ic_launcher.png", 48)
    copyAndResizeIcon("android/res/drawable-hdpi/ic_launcher.png", 72)
    copyAndResizeIcon("android/res/drawable-xhdpi/ic_launcher.png", 96)
    copyAndResizeIcon("android/res/drawable-xxhdpi/ic_launcher.png", 144)
    copyAndResizeIcon("android/ic_launcher-web.png", 512)
}

task updateIOS() << {
    deldir(file("ios/src"))
    def src = "../"
    def res = "res"
    def out = "ios/data"
    file(out).mkdirs()
    
    copyAndReplace("platforms/ios/robovm.properties", "ios/robovm.properties")
    copyAndReplace("platforms/ios/IOSLauncher.java", "ios/src/$packageDir/ios/IOSLauncher.java")
    copyAndResizeIcon("${out}/Icon.png", 57)
    copyAndResizeIcon("${out}/Icon-72.png", 72)
    copyAndResizeIcon("${out}/Icon@2x.png", 114)
    copyAndResizeIcon("${out}/Icon-72@2x.png", 144)
    
    def files = [
        [ 
            "splash-320x480", "splash-640x960", "splash-640x1136", "splash-750x1134",
            "splash-768x1004", "splash-1242x2208", "splash-1536x2008"
        ],
        [
            "Default", "Default@2x", "Default-568h@2x", "Default-375w-667h@2x", 
            "Default~ipad", "Default-414w-736h@3x", "Default@2x~ipad"
        ]
    ]
    
    def total = files[0].size() - 1
    
    for(i in 0..total) {
        def fl = files[0][i]
        def newFile = files[1][i]
        
        if (file("${src}/${fl}.png").exists()) {
            copy {
                from src
                into out
                include "${fl}.png"
                rename "${fl}.png", "${newFile}.png"
            }
        } else {
            copy {
                from res
                into out
                include "${fl}.png"
                rename "${fl}.png", "${newFile}.png"
            }
        }
    }
}

task updateAssets(type: Copy) {
    from "../assets"
    into "android/assets"
    exclude "**/*.moon"
    exclude "**/*.lua"
    exclude "**/*.DS_Store"
    exclude "**/*Thumbs.db"
}

def configure() {
    def f = file("../config.yml")
    
    if (f.exists()) {
        ext.cfg = new org.yaml.snakeyaml.Yaml().load(f.text)
    } else {
        ext.cfg = new org.yaml.snakeyaml.Yaml().load(
            '---\n' +
            '  name: "non"\n' +
            '  package: "non"\n' +
            '  version: "1.0.0"'
        )
    }
}

def copyAndReplace(input, out) {
    def values = ext.vals
    def total = values[0].size() - 1
    def txt = file(input).text
    
    for(i in 0..total) {
        txt = txt.replace(values[0][i], values[1][i])
    }
    
    out = new File(out)
    out.getParentFile().mkdirs()
    out.createNewFile()
    out.write(txt)
}

def deldir(file) {
    if(file.exists()) {
        def files = file.listFiles();
        
        if(files != null) {
            for(File fl: files) {
                if(fl.isDirectory()) {
                    deldir(fl)
                } else {
                    fl.delete()
                }
            }
        }
    }
        
    file.delete()
}

import static java.awt.RenderingHints.* 
import java.awt.image.BufferedImage 
import javax.imageio.ImageIO

def copyAndResizeIcon(targetPath, newSize) {
    def source = file("../icon.png").exists() ? file("../icon.png") : file("res/icon.png")
    def target = file(targetPath)
    if (target.exists()) target.delete()
    target.createNewFile()
    
    def img = ImageIO.read(source) 

    new BufferedImage( newSize, newSize, img.type ).with { 
        i -> createGraphics().with { 
            setRenderingHint( KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC )
            drawImage(img, 0, 0, newSize, newSize, null)
            dispose() 
        }
        
        ImageIO.write(i, 'png', target) 
    }
}
