sourceSets.main.java.srcDirs = [ "src/" ]
sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
ext.mainClassName = "${packageName}.ios.IOSLauncher"

task copyNatives << {
    file("build/libs/ios/").mkdirs();
    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-ios.jar")) outputDir = file("build/libs/ios")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.a"
            }
        }
    }
}

task updateRoboVMXML(dependsOn: copyNatives) << {
    def xml = file('robovm.xml')
    if (!xml.exists()) { return }
  
    def libtree = fileTree(dir: 'build/libs', include: '**/*.a')
    def config = new groovy.util.XmlParser().parse(xml)
    config.libs.each {libs ->
        libs.children().clear()
        libtree.each { File file ->
            libs.appendNode('lib', 'build/libs/ios/' + file.getName())
        }
    }
  
    def writer = new FileWriter(xml)
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace true
    printer.print(config)
}

task run(dependsOn: launchIPhoneSimulator)

task dist(dependsOn: createIPA) << {
    println "You can find ${appName}-${version}.ipa in /dist/ios"
}

launchIPhoneSimulator.dependsOn build
launchIPadSimulator.dependsOn build
launchIOSDevice.dependsOn build
createIPA.dependsOn build