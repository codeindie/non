sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "${packageName}.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets");

task run(type: JavaExec, dependsOn: classes) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
}

task dist(type: Jar, dependsOn: classes) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    
    doLast {
        file("../../dist/desktop").mkdirs()
        copy {
            from "build/libs"
            into "../../dist/desktop"
            include "desktop-${version}.jar"
            rename "desktop-${version}.jar", "${appName}-${version}.jar"
        }
        println "You can find ${appName}-${version}.jar in /dist/desktop"
    }
}

task update(dependsOn: ':update') << {
    def src = "../../project/non"
    def non = "../gen/non"
    def out = "../android/assets/non"
    
    def files = [ "icon-16", "icon-32", "icon-64", "icon-192", "icon-256"]
    
    for(fl in files) {
        if (file("${src}/${fl}.png").exists()) {
            copy {
                from src
                into out
                include "${fl}.png"
            }
        } else {
            copy {
                from non
                into out
                include "${fl}.png"
            }
        }
    }
}