configure()

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    
    dependencies {
        classpath 'com.android.tools.build:gradle:0.14.4'
        classpath 'org.robovm:robovm-gradle-plugin:1.0.0-beta-03'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
    }
}

allprojects {
    version = cfg.version
    
    ext {
        cfg = cfg
        appName = cfg.name
        packageName = cfg.package
        packageDir = cfg.package.replace('.', '/')
        gdxVersion = '1.5.3'
        roboVMVersion = '1.0.0-beta-03'
        box2DLightsVersion = '1.3'
        rhinoVersion = '1.7R4'
        kryonetVersion = '2.22.0-RC1'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"
    
    dependencies {
        compile project(":rhino")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"

        try { for(dep in cfg.desktop.libraries) compile dep } catch(e) { }
    }
}

project(":android") {
    apply plugin: 'android-sdk-manager'
    apply plugin: "android"
    
    configurations { natives }

    dependencies {
        compile project(":rhino")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"

        try { for(dep in cfg.android.libraries) compile dep } catch(e) { }
    }
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"
    
    configurations { natives }

    dependencies {
        compile project(":rhino")
        compile "org.robovm:robovm-rt:${roboVMVersion}"
        compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"

        try { for(dep in cfg.ios.libraries) compile dep } catch(e) { }
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "com.esotericsoftware:kryonet:$kryonetVersion"

        try { for(dep in cfg.libraries) compile dep } catch(e) { }
    }
}

project(":rhino") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compile "org.mozilla:rhino:$rhinoVersion"
    }
}

task hello << {
    copy {
        from "gen/hello"
        into "../project"
    }
}

task resolveDependencies << {
    project.rootProject.allprojects.each { subProject ->
        subProject.buildscript.configurations.each { configuration -> configuration.resolve() }
        subProject.configurations.each { configuration -> configuration.resolve() }
    }
}

task update << {
    deldir(file("ios/src"))
    deldir(file("android/src"))
    deldir(file("desktop/src"))
    
    def vals = [
        [ "%APP_NAME%", "%PACKAGE%", "%PACKAGE_DIR%" ],
        [ appName, packageName, packageDir ]
    ]
    
    copyAndReplace("templates/android/strings.xml", "android/res/values/strings.xml", vals)
    copyAndReplace("templates/android/AndroidManifest.xml", "android/AndroidManifest.xml", vals)
    copyAndReplace("templates/android/AndroidLauncher.java", "android/src/$packageDir/android/AndroidLauncher.java", vals)
    copyAndReplace("templates/ios/robovm.properties", "ios/robovm.properties", vals)
    copyAndReplace("templates/ios/IOSLauncher.java", "ios/src/$packageDir/ios/IOSLauncher.java", vals)
    copyAndReplace("templates/desktop/DesktopLauncher.java", "desktop/src/$packageDir/desktop/DesktopLauncher.java", vals)
    
    def src = "../project/res"
    def res = "gen/res"
    def out = "android/assets/res"
    def files = [ "loading.png", "loading_bg.png", "loading_bar.png", "loading_bar_bg.png" ]
    
    for(fl in files) {
        if (file("${src}/${fl}").exists()) {
            copy {
                from src
                into out
                include "${fl}"
            }
        } else {
            copy {
                from res
                into out
                include "${fl}"
            }
        }
    }
    
    copy {
        from "gen/res/javascript" 
        into "android/assets/res/javascript"
    }
    
    copy {
        from "../project"
        into "android/assets"
        exclude "res/"
        exclude "**/*.DS_Store"
        exclude "**/*Thumbs.db"
    }
}

def configure() {
    def f = file("../project/config.json")

    if (f.exists()) {
        ext.cfg = new groovy.json.JsonSlurper().parseText(f.text)
    } else {
        ext.cfg = new groovy.json.JsonSlurper().parseText('{ "name":"non", "package":"non", "version":"1.0.0" }')
    }
}

def copyAndReplace(input, out, values) {
    def total = values[0].size() - 1
    def txt = file(input).text
    
    for(i in 0..total-1) {
        txt = txt.replace(values[0][i], values[1][i])
    }
    
    out = new File(out)
    out.getParentFile().mkdirs()
    out.createNewFile()
    out.write(txt)
}

def deldir(file) {
    if(file.exists()) {
        def files = file.listFiles();
        
        if(files !=null) {
            for(File fl: files) {
                if(fl.isDirectory()) {
                    deldir(fl)
                } else {
                    fl.delete()
                }
            }
        }
    }
        
    file.delete()
}