sourceSets.main.java.srcDirs = [ "src/" ]
sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
ext.mainClassName = "${packageName}.ios.IOSLauncher"

task copyNatives << {
    file("build/libs/ios/").mkdirs();
    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-ios.jar")) outputDir = file("build/libs/ios")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.a"
            }
        }
    }
}

task updateRoboVMXML(dependsOn: copyNatives) << {
    def xml = file('robovm.xml')
    if (!xml.exists()) { return }
  
    def libtree = fileTree(dir: 'build/libs', include: '**/*.a')
    def config = new groovy.util.XmlParser().parse(xml)
    config.libs.each {libs ->
        libs.children().clear()
        libtree.each { File file ->
            libs.appendNode('lib', 'build/libs/ios/' + file.getName())
        }
    }
  
    def writer = new FileWriter(xml)
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace true
    printer.print(config)
}

task run(dependsOn: launchIPhoneSimulator)

task update(dependsOn: [':update', updateRoboVMXML]) << {
    def src = "../../project/non"
    def non = "../non"
    def out = "data"
    file(out).mkdirs()
    
    def files = [
        [ 
            "icon-57", "icon-72", "icon-114", "icon-144", "splash-320x480", "splash-640x960", 
            "splash-640x1136", "splash-750x1134", "splash-768x1004", "splash-1242x2208",
            "splash-1536x2008"
        ],
        [
            "Icon", "Icon-72", "Icon@2x", "Icon-72@2x", "Default", "Default@2x",
            "Default-568h@2x", "Default-375w-667h@2x", "Default~ipad", "Default-414w-736h@3x",
            "Default@2x~ipad"
        ]
    ]
    
    def total = files[0].size() - 1
    
    for(i in 0..total) {
        def fl = files[0][i]
        def newFile = files[1][i]
        
        if (file("${src}/${fl}.png").exists()) {
            copy {
                from src
                into out
                include "${fl}.png"
                rename "${fl}.png", "${newFile}.png"
            }
        } else {
            copy {
                from non
                into out
                include "${fl}.png"
                rename "${fl}.png", "${newFile}.png"
            }
        }
    }
}

task dist(dependsOn: createIPA) << {
    println "You can find ${appName}-${version}.ipa in /dist/ios"
}

launchIPhoneSimulator.dependsOn build
launchIPadSimulator.dependsOn build
launchIOSDevice.dependsOn build
createIPA.dependsOn build